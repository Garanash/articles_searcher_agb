import os
import imaplib
import email
import logging
import time
from threading import Thread, Lock
from email.header import decode_header
from datetime import datetime, timedelta
from dotenv import load_dotenv
import pytz
import sqlite3
import pandas as pd
import re
import difflib

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó .env ===
EMAIL = os.getenv('EMAIL')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER')
TARGET_SENDER = os.getenv('TARGET_SENDER')
EXCEL_FILENAME = 'bot_data.xlsx'  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
DB_FILE = os.getenv('DB_FILE')

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("mail_watcher.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

db_lock = Lock()

class DatabaseManager:
    def __init__(self, db_file):
        self.db_file = db_file
        self._initialize_db()

    def _initialize_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        with db_lock:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    period TEXT,
                    article TEXT,
                    article_clean TEXT,
                    name TEXT,
                    code TEXT,
                    warehouse TEXT,
                    quantity REAL,
                    price REAL,
                    currency TEXT,
                    price_date TEXT,
                    last_updated TIMESTAMP
                )
            ''')

            cursor.execute('CREATE INDEX IF NOT EXISTS idx_article_clean ON products (article_clean)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_warehouse ON products (warehouse)')

            conn.commit()
            conn.close()

    def update_from_excel(self, excel_file):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        if not os.path.exists(excel_file):
            logger.error(f"–§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False

        try:
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª {excel_file}...")
            df = pd.read_excel(excel_file)
            df = df.where(pd.notnull(df), None)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            df['article_clean'] = df['–ê—Ä—Ç–∏–∫—É–ª'].apply(lambda x: re.sub(r'[^\d]', '', str(x)))

            with db_lock:
                conn = sqlite3.connect(self.db_file)
                cursor = conn.cursor()

                cursor.execute('DELETE FROM products')

                for _, row in df.iterrows():
                    cursor.execute('''
                        INSERT INTO products (
                            period, article, article_clean, name, code,
                            warehouse, quantity, price, currency, price_date, last_updated
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        row.get('–ü–µ—Ä–∏–æ–¥'),
                        row.get('–ê—Ä—Ç–∏–∫—É–ª'),
                        row['article_clean'],
                        row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'),
                        row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥'),
                        row.get('–°–∫–ª–∞–¥'),
                        row.get('–û—Å—Ç–∞—Ç–æ–∫'),
                        row.get('–¶–µ–Ω–∞'),
                        row.get('–í–∞–ª—é—Ç–∞'),
                        row.get('–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã'),
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    ))

                conn.commit()
                conn.close()

            n_articles = df['–ê—Ä—Ç–∏–∫—É–ª'].nunique()
            n_warehouses = df['–°–∫–ª–∞–¥'].nunique()
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df)} | –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {n_articles} | –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {n_warehouses}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def search_products(self, article_clean):
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        with db_lock:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()

            cursor.execute('''
                SELECT * FROM products 
                WHERE article_clean = ?
                ORDER BY warehouse, period DESC
            ''', (article_clean,))

            columns = [column[0] for column in cursor.description]
            results = [dict(zip(columns, row)) for row in cursor.fetchall()]

            conn.close()
            return results


def decode_mail_header(header):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å–µ–º"""
    if header is None:
        return ""
    decoded = decode_header(header)
    return ''.join(
        str(t[0], t[1] or 'utf-8') if isinstance(t[0], bytes) else str(t[0])
        for t in decoded
    )


def is_target_email(msg):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ —Ü–µ–ª–µ–≤—ã–º"""
    from_email = msg.get('From', '')
    return TARGET_SENDER.lower() in from_email.lower()


def download_latest_excel():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π Excel-—Ñ–∞–π–ª (.xlsx) –∏–∑ –ø–∏—Å–µ–º –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    mail = None
    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL, EMAIL_PASSWORD)
        mail.select('INBOX')

        # –ò—â–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ)
        status, messages = mail.search(None, f'(FROM "{TARGET_SENDER}")')
        if status != 'OK':
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–∏—Å–µ–º")
            return False

        message_ids = messages[0].split()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º –æ—Ç {TARGET_SENDER}: {len(message_ids)}")
        if not message_ids:
            logger.info("–ù–µ—Ç –ø–∏—Å–µ–º –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
            return False

        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ (—Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ)
        for msg_id in reversed(message_ids):
            status, msg_data = mail.fetch(msg_id, '(RFC822)')
            if status != 'OK':
                continue

            msg = email.message_from_bytes(msg_data[0][1])
            if not is_target_email(msg):
                continue

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞: {decode_mail_header(msg.get('Subject', ''))}")

            found_xlsx = False
            for part in msg.walk():
                if part.get_content_maintype() == 'multipart':
                    continue

                filename = part.get_filename()
                if not filename:
                    continue

                filename = decode_mail_header(filename)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ: {filename}")
                if not filename.lower().endswith('.xlsx'):
                    continue

                try:
                    with open(EXCEL_FILENAME, 'wb') as f:
                        f.write(part.get_payload(decode=True))
                    logger.info(f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {EXCEL_FILENAME}")
                    found_xlsx = True
                    mail.store(msg_id, '+FLAGS', '\\Seen')
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    continue
            if found_xlsx:
                return True
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ (.xlsx) –≤–æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö –ø–∏—Å–µ–º!")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if mail:
            try:
                mail.logout()
            except Exception:
                pass


def compare_excel_with_db(excel_file, db_file):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –±–∞–∑–æ–π –∏ –ø–∏—à–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –≤ –ª–æ–≥."""
    if not os.path.exists(excel_file):
        logger.error(f"–§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return
    try:
        df_new = pd.read_excel(excel_file)
        df_new = df_new.where(pd.notnull(df_new), None)
        df_new['article_clean'] = df_new['–ê—Ä—Ç–∏–∫—É–ª'].apply(lambda x: re.sub(r'[^\d]', '', str(x)))
        new_dict = {}
        for _, row in df_new.iterrows():
            key = (str(row.get('–ê—Ä—Ç–∏–∫—É–ª')), str(row.get('–°–∫–ª–∞–¥')))
            new_dict[key] = {
                'quantity': row.get('–û—Å—Ç–∞—Ç–æ–∫'),
                'price': row.get('–¶–µ–Ω–∞'),
                'currency': row.get('–í–∞–ª—é—Ç–∞'),
                'price_date': row.get('–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã'),
                'name': row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'),
                'code': row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥'),
            }

        with db_lock:
            conn = sqlite3.connect(db_file)
            cursor = conn.cursor()
            cursor.execute('SELECT article, warehouse, quantity, price, currency, price_date, name, code FROM products')
            db_dict = {}
            for row in cursor.fetchall():
                key = (str(row[0]), str(row[1]))
                db_dict[key] = {
                    'quantity': row[2],
                    'price': row[3],
                    'currency': row[4],
                    'price_date': row[5],
                    'name': row[6],
                    'code': row[7],
                }
            conn.close()

        added = set(new_dict.keys()) - set(db_dict.keys())
        removed = set(db_dict.keys()) - set(new_dict.keys())
        changed = []
        for key in set(new_dict.keys()) & set(db_dict.keys()):
            changes = {}
            for field in new_dict[key]:
                if str(new_dict[key][field]) != str(db_dict[key][field]):
                    changes[field] = {'old': db_dict[key][field], 'new': new_dict[key][field]}
            if changes:
                changed.append((key, changes))

        logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –±–∞–∑–æ–π:")
        logger.info(f"–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(added)} –∑–∞–ø–∏—Å–µ–π: {list(added)[:10]}")
        logger.info(f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {len(removed)} –∑–∞–ø–∏—Å–µ–π: {list(removed)[:10]}")
        logger.info(f"–ë—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ: {len(changed)} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changed[:5]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ Excel –∏ –ë–î: {e}")


def run_daily_update():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 20:00 –ø–æ –ú–æ—Å–∫–≤–µ"""
    db_manager = DatabaseManager(DB_FILE)

    while True:
        try:
            now = datetime.now(MOSCOW_TZ)
            target_time = now.replace(hour=20, minute=0, second=0, microsecond=0)

            if now >= target_time:
                target_time += timedelta(days=1)

            sleep_seconds = (target_time - now).total_seconds()
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {target_time.strftime('%Y-%m-%d %H:%M:%S')}")

            time.sleep(sleep_seconds)

            logger.info("–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            if download_latest_excel():
                compare_excel_with_db(EXCEL_FILENAME, DB_FILE)
                if db_manager.update_from_excel(EXCEL_FILENAME):
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            time.sleep(3600)


if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db_manager = DatabaseManager(DB_FILE)
    logger.info("–ü—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞...")
    if download_latest_excel():
        compare_excel_with_db(EXCEL_FILENAME, DB_FILE)
        if db_manager.update_from_excel(EXCEL_FILENAME):
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    else:
        logger.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π Excel-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    run_daily_update()