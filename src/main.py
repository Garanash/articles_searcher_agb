import os
import re
import time
import logging
import sqlite3
from threading import Thread, Lock
from datetime import datetime
from dotenv import load_dotenv
import telebot
import pandas as pd
import pytz

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("bot_log.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó .env ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
EXCEL_FILE = 'bot_data.xlsx'  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
DB_FILE = os.getenv('DB_FILE')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_lock = Lock()


class DatabaseManager:
    def __init__(self, db_file):
        self.db_file = db_file
        self._initialize_db()

    def _initialize_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        with db_lock:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    period TEXT,
                    article TEXT,
                    article_clean TEXT,
                    name TEXT,
                    code TEXT,
                    warehouse TEXT,
                    quantity REAL,
                    price REAL,
                    currency TEXT,
                    price_date TEXT,
                    last_updated TIMESTAMP
                )
            ''')

            cursor.execute('CREATE INDEX IF NOT EXISTS idx_article_clean ON products (article_clean)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_warehouse ON products (warehouse)')

            conn.commit()
            conn.close()

    def update_from_excel(self, excel_file):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        if not os.path.exists(excel_file):
            logger.error(f"–§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False

        try:
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é Excel-—Ñ–∞–π–ª {excel_file}...")
            df = pd.read_excel(excel_file)
            df = df.where(pd.notnull(df), None)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            df['article_clean'] = df['–ê—Ä—Ç–∏–∫—É–ª'].apply(lambda x: re.sub(r'[^\d]', '', str(x)))

            with db_lock:
                conn = sqlite3.connect(self.db_file)
                cursor = conn.cursor()

                cursor.execute('DELETE FROM products')

                for _, row in df.iterrows():
                    cursor.execute('''
                        INSERT INTO products (
                            period, article, article_clean, name, code,
                            warehouse, quantity, price, currency, price_date, last_updated
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        row.get('–ü–µ—Ä–∏–æ–¥'),
                        row.get('–ê—Ä—Ç–∏–∫—É–ª'),
                        row['article_clean'],
                        row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'),
                        row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.–ö–æ–¥'),
                        row.get('–°–∫–ª–∞–¥'),
                        row.get('–û—Å—Ç–∞—Ç–æ–∫'),
                        row.get('–¶–µ–Ω–∞'),
                        row.get('–í–∞–ª—é—Ç–∞'),
                        row.get('–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã'),
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    ))

                conn.commit()
                conn.close()

            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(df)}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def search_products(self, article_clean):
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        with db_lock:
            conn = sqlite3.connect(self.db_file)
            cursor = conn.cursor()

            cursor.execute('''
                SELECT * FROM products 
                WHERE article_clean = ?
                ORDER BY warehouse, period DESC
            ''', (article_clean,))

            columns = [column[0] for column in cursor.description]
            results = [dict(zip(columns, row)) for row in cursor.fetchall()]

            conn.close()
            return results


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager(DB_FILE)


class BotWrapper:
    def __init__(self, token):
        self.token = token
        self.bot = telebot.TeleBot(token)
        self._initialize_bot()

    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º polling
            self.bot.delete_webhook()
            time.sleep(1)
            self.bot.get_me()
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
            return False

    def polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                self.bot.polling(none_stop=True, interval=3, timeout=60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
                time.sleep(10)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_wrapper = BotWrapper(TELEGRAM_TOKEN)
bot = bot_wrapper.bot


def format_product_info(product):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    return (
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {product['period'] or '‚Äî'}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product['article'] or '‚Äî'}\n"
        f"üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {product['name'] or '‚Äî'}\n"
        f"üî¢ –ö–æ–¥: {product['code'] or '‚Äî'}\n"
        f"üè≠ –°–∫–ª–∞–¥: {product['warehouse'] or '‚Äî'}\n"
        f"üìä –û—Å—Ç–∞—Ç–æ–∫: {product['quantity'] or '‚Äî'}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price'] or '‚Äî'} {product['currency'] or ''}\n"
        f"üìÖ –î–∞—Ç–∞ —Ü–µ–Ω—ã: {product['price_date'] or '‚Äî'}\n"
    )


ALLOWED_USERS = {
    7513623853, 291591740, 308980455, 880161173, 7812414563, 459890220, 972172071, 747358781, 1654230, 7965375521, 7408230278, 262440194, 431233023, 913802510, 213653502, 293959414, 7426490187, 6577259391, 7825850418, 597558526
}


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    if message.from_user.id not in ALLOWED_USERS:
        bot.send_message(message.chat.id, "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    help_text = (
        "üîç *–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ ‚Äî –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ –±–∞–∑–µ.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "`805015`\n"
        "`–≥–¥–µ 805015 –∏ 805017`\n"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')


@bot.message_handler(commands=['reload'])
def handle_reload(message):
    if message.from_user.id not in ALLOWED_USERS:
        bot.send_message(message.chat.id, "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    try:
        bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        success = db_manager.update_from_excel(EXCEL_FILE)
        if success:
            bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã.")


@bot.message_handler(func=lambda message: True)
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.id not in ALLOWED_USERS:
        bot.send_message(message.chat.id, "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    try:
        user_text = message.text
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.id}: {user_text}")

        # –ù–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, -, /, –¥–ª–∏–Ω–∞ >= 4
        article_pattern = r"[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9][A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\-/]{2,}[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]"
        articles = re.findall(article_pattern, user_text)
        articles = list(set(articles))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –Ω–µ–∞—Ä—Ç–∏–∫—É–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        articles = [a for a in articles if len(a) >= 4 and any(c.isdigit() for c in a)]

        if not articles:
            bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            return

        for article in articles:
            logger.info(f"–ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª: {article}")
            bot.send_chat_action(message.chat.id, 'typing')
            # –ü–æ–∏—Å–∫ –ø–æ article (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            with db_lock:
                conn = sqlite3.connect(DB_FILE)
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM products WHERE article = ? ORDER BY warehouse, period DESC
                ''', (article,))
                columns = [column[0] for column in cursor.description]
                products = [dict(zip(columns, row)) for row in cursor.fetchall()]
                conn.close()

            if not products:
                bot.send_message(message.chat.id, f"‚ùå –ê—Ä—Ç–∏–∫—É–ª {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                continue

            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã
            price_dates = set(p['price_date'] for p in products if p['price_date'])
            price_dates_str = ', '.join(sorted(price_dates)) if price_dates else '‚Äî'

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            msg = f"üîé –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            msg += f"üìÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã: {price_dates_str}\n"
            msg += f"\n"
            for product in products:
                msg += (
                    f"üè≠ –°–∫–ª–∞–¥: {product['warehouse'] or '‚Äî'}\n"
                    f"üìä –û—Å—Ç–∞—Ç–æ–∫: {product['quantity'] or '‚Äî'}\n"
                    f"üí∞ –¶–µ–Ω–∞: {product['price'] or '‚Äî'} {product['currency'] or ''}\n"
                    f"üè∑ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {product['name'] or '‚Äî'}\n"
                    f"üî¢ –ö–æ–¥: {product['code'] or '‚Äî'}\n"
                    f"\n"
                )
            bot.send_message(message.chat.id, msg.strip())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


if __name__ == "__main__":
    if bot_wrapper._initialize_bot():
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        db_manager.update_from_excel(EXCEL_FILE)

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∑–∞–ø—Ä–æ—Å—ã...")
        bot_wrapper.polling()
    else:
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")